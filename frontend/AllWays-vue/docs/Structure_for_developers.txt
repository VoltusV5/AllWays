Автоматически при создании Vue проекта:

my-app/
|** .vscode (только в программе Visual Studio Code)
├─ node_modules/ — сторонние пакеты, сюда обычно не лезут руками.
├─ public/ — статические файлы (иконки, favicon, HTML-шаблон).
│  └─ index.html
├─ src/ — тут лежит весь исходный код приложения.
│  ├─ assets/
│  ├─ components/
│  ├─ App.vue
│  └─ main.js
├─ .gitignore — список файлов и папок, игнорируемых git.
├─ package.json — зависимости, скрипты и базовые настройки проекта.
└─ README.md — описание проекта для разработчиков.





Разделение по слоям и каталоги в папке src
	Базовые каталоги

src/
├─ assets/       // Статические ресурсы — картинки, шрифты
├─ components/   // Мелкие переиспользуемые компоненты-инструменты
├─ views/        // Страницы/экраны, которые сопоставляются с роутами
├─ router/       // Настройки маршрутизации
├─ store/        // Центральное хранилище состояния (Vuex, Pinia)
├─ composables/  // Логика-композиции (composition API)
├─ utils/        // Утилиты и хелперы
├─ services/     // Работа с API/сервером
├─ App.vue       // Главный корневой компонент
└─ main.js       // Точка входа, инициализация Vue-приложения





assets
Тут хранят изображения, иконки, шрифты, иногда глобальные стили (например, normalize.css), которые нужны во всем проекте.

components
Сюда складываются переиспользуемые, независимо автономные “кусочки” интерфейса: кнопки, карточки, поля ввода, модальные окна и т.д.

views
Подходит для компонентов-страниц. Например, "Главная", "Профиль пользователя", "Панель администратора" — всё, что напрямую сопоставляется какому-либо маршруту в приложении. Обычно каждая view состоит из других компонентов.

router
Обычно содержит основной файл маршрутизации (router.js или index.js), где описаны маршруты, хуки, middleware и т.п.

store
Если вы используете Vuex или Pinia, здесь будут лежать модули состояния, actions, mutations, getters и т.д.

composables
Здесь складываются функции-композиции. Это отличный паттерн для выделения повторяющейся бизнес-логики. Подробнее расскажу чуть ниже.

utils
Мелкие утилитарные функции, которые не зависят от состояния приложения или Vue и могут использоваться где угодно.

services
Инкапсулирует работу с API: здесь лежат функции для HTTP-запросов (fetch/axios).






Пример более развернутой структуры

src/
├─ components/
│  ├─ ui/               // Общие элементы: Button, Modal, Icon
│  └─ layout/           // Header, Footer, Sidebar и др.
├─ views/
│  ├─ HomeView.vue
│  ├─ ProfileView.vue
│  └─ SettingsView.vue
├─ store/
│  ├─ modules/
│  │  ├─ user.js
│  │  └─ products.js
│  └─ index.js
├─ composables/
│  ├─ useAuth.js
│  └─ useFetch.js
├─ utils/
├─ services/
├─ router/
├─ App.vue
└─ main.js


Выделение папки ui особенно удобно, если собирается “собственная библиотека” часто используемых элементов управления. 
Папка layout содержит некие “шаблоны” с местами для вложения содержимого.




Что класть в components/
В папке components размещаются, как правило, атомарные (Button, Input), молекулярные (Form, Card) и иногда ещё более сложные компоненты, из которых собираются страницы. Переиспользуемость—главный ориентир.

Давайте рассмотрим структуру примера:

src/
├─ components/
│  ├─ ui/
│  │  ├─ MyButton.vue
│  │  └─ MyInput.vue
│  ├─ layout/
│  │  ├─ AppHeader.vue
│  │  ├─ AppFooter.vue
│  │  └─ AppSidebar.vue
│  └─ MyCard.vue





Отдельная папка для компонента

components/
└─ UserCard/
   ├─ UserCard.vue
   ├─ UserAvatar.vue
   ├─ UserCard.spec.js  // тесты
   ├─ styles.css
   └─ utils.js




Page-компоненты: Каталог views
Папка views нужна для видимых пользователю страниц, часто связанных с роутами. Поддерживать единый шаблон легко:

views/
├─ HomeView.vue
├─ ProfileView.vue
└─ ArticleView.vue







Пример большого проекта (итеративно расширяемой структуры):

src/
├─ api/            // все сервисы и клиенты (GraphQL, REST)
├─ assets/         // иконки, лого, css, шрифты
├─ components/     // UI- и базовые компоненты
├─ config/         // конфигурационные файлы (переменные, настройки)
├─ constants/      // константы для повторного использования
├─ directives/     // vue-директивы
├─ features/       // фичи и хранилища по областям
├─ hooks/          // композиционные хуки
├─ layouts/        // шаблоны страниц
├─ locales/        // локализация
├─ mixins/         // миксины, если используется Options API
├─ router/         // роутер со структурой
├─ store/          // Vuex/Pinia
├─ styles/         // SCSS/Less и переменные
├─ types/          // определения типов, если используется TypeScript
├─ utils/          // хелперы
├─ views/          // основные страницы
└─ main.ts         // точка входа




